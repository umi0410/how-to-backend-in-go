// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"db/ent/predicate"
	"db/ent/tourproduct"
	"db/ent/user"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TourProductUpdate is the builder for updating TourProduct entities.
type TourProductUpdate struct {
	config
	hooks    []Hook
	mutation *TourProductMutation
}

// Where adds a new predicate for the TourProductUpdate builder.
func (tpu *TourProductUpdate) Where(ps ...predicate.TourProduct) *TourProductUpdate {
	tpu.mutation.predicates = append(tpu.mutation.predicates, ps...)
	return tpu
}

// SetName sets the "name" field.
func (tpu *TourProductUpdate) SetName(s string) *TourProductUpdate {
	tpu.mutation.SetName(s)
	return tpu
}

// SetPrice sets the "price" field.
func (tpu *TourProductUpdate) SetPrice(i int) *TourProductUpdate {
	tpu.mutation.ResetPrice()
	tpu.mutation.SetPrice(i)
	return tpu
}

// AddPrice adds i to the "price" field.
func (tpu *TourProductUpdate) AddPrice(i int) *TourProductUpdate {
	tpu.mutation.AddPrice(i)
	return tpu
}

// SetForSale sets the "forSale" field.
func (tpu *TourProductUpdate) SetForSale(b bool) *TourProductUpdate {
	tpu.mutation.SetForSale(b)
	return tpu
}

// SetNillableForSale sets the "forSale" field if the given value is not nil.
func (tpu *TourProductUpdate) SetNillableForSale(b *bool) *TourProductUpdate {
	if b != nil {
		tpu.SetForSale(*b)
	}
	return tpu
}

// SetManagerID sets the "manager" edge to the User entity by ID.
func (tpu *TourProductUpdate) SetManagerID(id string) *TourProductUpdate {
	tpu.mutation.SetManagerID(id)
	return tpu
}

// SetManager sets the "manager" edge to the User entity.
func (tpu *TourProductUpdate) SetManager(u *User) *TourProductUpdate {
	return tpu.SetManagerID(u.ID)
}

// Mutation returns the TourProductMutation object of the builder.
func (tpu *TourProductUpdate) Mutation() *TourProductMutation {
	return tpu.mutation
}

// ClearManager clears the "manager" edge to the User entity.
func (tpu *TourProductUpdate) ClearManager() *TourProductUpdate {
	tpu.mutation.ClearManager()
	return tpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TourProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tpu.hooks) == 0 {
		if err = tpu.check(); err != nil {
			return 0, err
		}
		affected, err = tpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TourProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpu.check(); err != nil {
				return 0, err
			}
			tpu.mutation = mutation
			affected, err = tpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tpu.hooks) - 1; i >= 0; i-- {
			mut = tpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TourProductUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TourProductUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TourProductUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpu *TourProductUpdate) check() error {
	if _, ok := tpu.mutation.ManagerID(); tpu.mutation.ManagerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"manager\"")
	}
	return nil
}

func (tpu *TourProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tourproduct.Table,
			Columns: tourproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tourproduct.FieldID,
			},
		},
	}
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tourproduct.FieldName,
		})
	}
	if value, ok := tpu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tourproduct.FieldPrice,
		})
	}
	if value, ok := tpu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tourproduct.FieldPrice,
		})
	}
	if value, ok := tpu.mutation.ForSale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tourproduct.FieldForSale,
		})
	}
	if tpu.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tourproduct.ManagerTable,
			Columns: []string{tourproduct.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tourproduct.ManagerTable,
			Columns: []string{tourproduct.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tourproduct.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TourProductUpdateOne is the builder for updating a single TourProduct entity.
type TourProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TourProductMutation
}

// SetName sets the "name" field.
func (tpuo *TourProductUpdateOne) SetName(s string) *TourProductUpdateOne {
	tpuo.mutation.SetName(s)
	return tpuo
}

// SetPrice sets the "price" field.
func (tpuo *TourProductUpdateOne) SetPrice(i int) *TourProductUpdateOne {
	tpuo.mutation.ResetPrice()
	tpuo.mutation.SetPrice(i)
	return tpuo
}

// AddPrice adds i to the "price" field.
func (tpuo *TourProductUpdateOne) AddPrice(i int) *TourProductUpdateOne {
	tpuo.mutation.AddPrice(i)
	return tpuo
}

// SetForSale sets the "forSale" field.
func (tpuo *TourProductUpdateOne) SetForSale(b bool) *TourProductUpdateOne {
	tpuo.mutation.SetForSale(b)
	return tpuo
}

// SetNillableForSale sets the "forSale" field if the given value is not nil.
func (tpuo *TourProductUpdateOne) SetNillableForSale(b *bool) *TourProductUpdateOne {
	if b != nil {
		tpuo.SetForSale(*b)
	}
	return tpuo
}

// SetManagerID sets the "manager" edge to the User entity by ID.
func (tpuo *TourProductUpdateOne) SetManagerID(id string) *TourProductUpdateOne {
	tpuo.mutation.SetManagerID(id)
	return tpuo
}

// SetManager sets the "manager" edge to the User entity.
func (tpuo *TourProductUpdateOne) SetManager(u *User) *TourProductUpdateOne {
	return tpuo.SetManagerID(u.ID)
}

// Mutation returns the TourProductMutation object of the builder.
func (tpuo *TourProductUpdateOne) Mutation() *TourProductMutation {
	return tpuo.mutation
}

// ClearManager clears the "manager" edge to the User entity.
func (tpuo *TourProductUpdateOne) ClearManager() *TourProductUpdateOne {
	tpuo.mutation.ClearManager()
	return tpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TourProductUpdateOne) Select(field string, fields ...string) *TourProductUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TourProduct entity.
func (tpuo *TourProductUpdateOne) Save(ctx context.Context) (*TourProduct, error) {
	var (
		err  error
		node *TourProduct
	)
	if len(tpuo.hooks) == 0 {
		if err = tpuo.check(); err != nil {
			return nil, err
		}
		node, err = tpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TourProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpuo.check(); err != nil {
				return nil, err
			}
			tpuo.mutation = mutation
			node, err = tpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tpuo.hooks) - 1; i >= 0; i-- {
			mut = tpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TourProductUpdateOne) SaveX(ctx context.Context) *TourProduct {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TourProductUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TourProductUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpuo *TourProductUpdateOne) check() error {
	if _, ok := tpuo.mutation.ManagerID(); tpuo.mutation.ManagerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"manager\"")
	}
	return nil
}

func (tpuo *TourProductUpdateOne) sqlSave(ctx context.Context) (_node *TourProduct, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tourproduct.Table,
			Columns: tourproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tourproduct.FieldID,
			},
		},
	}
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TourProduct.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tourproduct.FieldID)
		for _, f := range fields {
			if !tourproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tourproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tourproduct.FieldName,
		})
	}
	if value, ok := tpuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tourproduct.FieldPrice,
		})
	}
	if value, ok := tpuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tourproduct.FieldPrice,
		})
	}
	if value, ok := tpuo.mutation.ForSale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tourproduct.FieldForSale,
		})
	}
	if tpuo.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tourproduct.ManagerTable,
			Columns: []string{tourproduct.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tourproduct.ManagerTable,
			Columns: []string{tourproduct.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TourProduct{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tourproduct.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
